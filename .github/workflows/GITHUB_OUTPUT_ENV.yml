name: test GITHUB_OUTPUT/GITHUB_ENV
on:
  push:
    branches: 
      - dev
  workflow_dispatch:


jobs:



  job1:
    name: hello job 1
    runs-on: ubuntu-latest
    # this is to be used in other jobs and not same job (job1)
    outputs:
      output1: ${{ steps.ID3.outputs.my_output1 }}

    steps:     
      - name: writing value to GITHUB_ENV
        run: |
          echo "my_GITHUB_ENV=This is written to GITHUB_ENV" >> $GITHUB_ENV

      - name: reading content of GITHUB_ENV in 2 ways in same job
        run: |
          echo "step1 output:" $my_GITHUB_ENV
          echo "step1 output:" ${{ env.my_GITHUB_ENV }}
       
      - name: writing value to GITHUB_OUTPUT
        id: kianosh
        run: |
          echo "my_output1=Hello" >> $GITHUB_OUTPUT

      - name: reading content of GITHUB_OUTPUT in same job
        run: |
          echo "this is the output from another step in same job:" ${{ steps.kianosh.outputs.my_output1 }}







  job2:
    name: hello job 2
    runs-on: ubuntu-latest
    outputs:
      output2: ${{ steps.ID1.outputs.my_output2 }}

    steps:
      - name: print out output2 from job1 step3
        id: ID1
        run: |
          echo "my_output2=world" >> $GITHUB_OUTPUT

  job3:
    name: hello job 3
    runs-on: ubuntu-latest
    outputs:
      output3: ${{ steps.ID1.outputs.my_output3 }}

    steps:
      - name: print out output2 from job1 step3
        id: ID1
        run: |
          echo "my_output3=from GH outputs" >> $GITHUB_OUTPUT    

  job4:
    name: hello job 4
    runs-on: ubuntu-latest
    needs: [job1, job2, job3]
    steps:
      - name: print out output2 from job1 step3
        id: ID1
        run: echo ${{ needs.job1.outputs.output1 }} ${{ needs.job2.outputs.output2 }} ${{ needs.job3.outputs.output3 }}