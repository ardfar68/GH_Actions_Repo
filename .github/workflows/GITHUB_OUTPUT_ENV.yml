name: test GITHUB_OUTPUT/GITHUB_ENV
on:
  workflow_dispatch:
  push:
    branches: 
      - dev
    # branches-ignore:
    #   - dev

jobs:

  job1:
    name: hello job 1
    runs-on: ubuntu-latest
    # this is to be used in other jobs and not same job (job1)
    outputs:
      sum: ${{ steps.calc1.outputs.sum_result }}
      multi: ${{ steps.calc2.outputs.multi_result }}

    steps:    
      # GITHUB_ENV: write to in step 1, 2 and read in step 3
      - name: step1, usual way
        run: |
          echo my_GITHUB_ENV1=aaaaaaaaaaaaaaaaaaaaa >> $GITHUB_ENV

      - name: step2, using heredoc (multi line)
        run: |
          cat <<EOF >> $GITHUB_ENV
          VAR1=Kianosh är snart
          VAR2=Anahita är snart
          VAR3=Jag jobbar
          EOF
        
      - name: step3, reading content of GITHUB_ENV in 2 ways in same job
        run: |
          echo step1 output: $my_GITHUB_ENV1
          echo step2 output: $VAR1 20 år
          echo step2 output: ${{ env.VAR2 }} 18 år
          echo step2 output: ${{ env.VAR3 }} på Qlik
    # *****************************************************************************************
      # GITHUB_OUTPUT: write to in step 4, 5 and read in step 6 (step must have an id)
      - name: step4, writing a value to GITHUB_OUTPUT
        id: step4_id
        run: echo my_GITHUB_OUTPUT1=aaaaaaaaaaaaaaaaaaaaaa >> $GITHUB_OUTPUT

      - name: step5, writing a value to GITHUB_OUTPUT
        id: step5_id
        run: |
          echo my_GITHUB_OUTPUT2=bbbbbbbbbbbbbbbbbbbbbbb >> $GITHUB_OUTPUT
          echo my_GITHUB_OUTPUT3=ccccccccccccccccccccccc >> $GITHUB_OUTPUT

      - name: step6, reading a value from GITHUB_OUTPUT
        run: |
          echo step4 output: ${{ steps.step4_id.outputs.my_GITHUB_OUTPUT1 }}
          echo step5 output: ${{ steps.step5_id.outputs.my_GITHUB_OUTPUT2 }}
          echo step5 output: ${{ steps.step5_id.outputs.my_GITHUB_OUTPUT3 }}
    # *****************************************************************************************
      # outputs: using outputs to send results of steps in job1 to other jobs
      - name: step7, calculate some summation 
        id: calc1
        run: |
          echo sum_result=$((2 + 2)) >> $GITHUB_OUTPUT
      
      - name: step8, calculate multiplication
        id: calc2
        run: |
          echo multi_result=$((25 * 25)) >> $GITHUB_OUTPUT
         
# *****************************************************************************************
  job2:
    name: hello job 2
    needs: job1
    runs-on: ubuntu-latest
    outputs:
      sum: ${{ steps.calc1.outputs.sum_result }}
      multi: ${{ steps.calc2.outputs.multi_result }}

    steps:
      - name: step1, use the sum result from job1
        run: "echo The sum result from job 1: ${{ needs.job1.outputs.sum }}"

      - name: step2, use the multiplication result from job1
        run: "echo The multiplication result from job 1: ${{ needs.job1.outputs.multi }}"
      
      - name: step3, calculate some summation 
        id: calc1
        run: |
          echo sum_result=$((10 + 10)) >> $GITHUB_OUTPUT
      
      - name: step4, calculate multiplication
        id: calc2
        run: |
          echo multi_result=$((10 * 10)) >> $GITHUB_OUTPUT
# *****************************************************************************************  
  job3:
    name: hello job 4
    runs-on: ubuntu-latest
    needs: [job1, job2]
    steps:
      - name: reading contents of GITHUB_OUTPUT from job 1,2 and 3
        run: |
          echo ${{ needs.job1.outputs.sum }} ${{ needs.job1.outputs.multi }} 
          echo ${{ needs.job2.outputs.sum }} ${{ needs.job2.outputs.multi }} 
